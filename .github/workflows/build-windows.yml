name: Build Windows Executable

on:
  push:
    branches: [ "main" ] # Trigger on push to main branch
  workflow_dispatch: # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest # Use the latest Windows runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Choose a Python version compatible with your deps

    # --- START CACHING ---
    - name: Get pip cache dir
      id: pip_cache
      run: |
        echo "dir=$(pip cache dir)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      shell: pwsh

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip_cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Determine cache path *before* trying to cache it
    - name: Determine Whisper Cache Path
      id: whisper_cache_path
      run: |
        $whisperCachePath = python -c "import os; print(os.path.join(os.path.expanduser('~'), '.cache', 'whisper'))"
        echo "WHISPER_CACHE_PATH=$whisperCachePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "Expected Whisper cache path: $whisperCachePath"
      shell: pwsh

    - name: Cache Whisper models
      uses: actions/cache@v4
      id: cache-whisper-models # Give this step an ID
      with:
        # Use the path determined in the previous step
        path: ${{ env.WHISPER_CACHE_PATH }}
        # Key based on OS and the specific model we intend to cache
        key: ${{ runner.os }}-whisper-models-base
    # --- END CACHING ---

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      shell: bash

    - name: Install FFmpeg
      run: |
        choco install ffmpeg -y --no-progress
        echo "C:\ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    - name: Download Whisper Model (if not cached)
      # This step now primarily ensures the model exists after cache restore/miss
      # It will only download if the cache was missed and the model isn't there.
      run: |
        echo "Ensuring base Whisper model exists in cache path: ${{ env.WHISPER_CACHE_PATH }}"
        python -c "import whisper; print('Loading base Whisper model (will download if needed)...'); model = whisper.load_model('base'); print('Model loaded/verified.')"
        # Verify the specific model file exists there after load attempt
        $modelFile = Join-Path "${{ env.WHISPER_CACHE_PATH }}" "base.pt"
        if (-not (Test-Path $modelFile)) {
          echo "Error: Expected model file not found at $modelFile after load attempt."
          exit 1
        }
        echo "Model file base.pt confirmed at cache path."
      shell: pwsh

    - name: Build with PyInstaller
      run: |
        echo "Using Whisper Cache Path for bundling: ${{ env.WHISPER_CACHE_PATH }}"
        $modelSourcePath = Join-Path "${{ env.WHISPER_CACHE_PATH }}" "base.pt"
        if (-not (Test-Path $modelSourcePath)) {
          echo "Error: Source model file not found at $modelSourcePath before PyInstaller run."
          exit 1
        }
        $addDataArg = "--add-data=$modelSourcePath;whisper_models"
        echo "PyInstaller add-data argument: $addDataArg"

        # Ensure backticks are the VERY LAST character on each continued line
        pyinstaller main.py `
          --name SingingAnalysisTool `
          --console `
          --onedir `
          --clean `
          $addDataArg `
          --hidden-import=sklearn.utils._typedefs `
          --hidden-import=sklearn.neighbors._typedefs `
          --hidden-import=sklearn.neighbors._quad_tree `
          --hidden-import=sklearn.tree `
          --hidden-import=sklearn.tree._utils `
          --hidden-import=pkg_resources.py2_warn `
          --hidden-import=soundfile `
          --hidden-import=IPython
      shell: pwsh

    - name: Copy FFmpeg to dist folder
      run: |
        $ffmpegPath = "C:\ProgramData\chocolatey\bin\ffmpeg.exe"
        $destDir = "dist\SingingAnalysisTool"
        if (Test-Path $ffmpegPath) {
          echo "Copying $ffmpegPath to $destDir"
          Copy-Item -Path $ffmpegPath -Destination $destDir
        } else {
          echo "Error: ffmpeg.exe not found at $ffmpegPath"
          exit 1
        }
      shell: pwsh

    - name: Archive distribution folder
      run: |
        # Change directory to 'dist' so the archive is created relative to it
        Push-Location dist
        Compress-Archive -Path SingingAnalysisTool -DestinationPath ../SingingAnalysisTool-Windows.zip -Force
        Pop-Location
      shell: pwsh

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: SingingAnalysisTool-Windows-Build
        # The path is now relative to the workspace root, not inside dist
        path: SingingAnalysisTool-Windows.zip 
